#!/usr/bin/env bash

set -euo pipefail

# Check release environment script for AgentGo Node.js SDK

echo "🔍 Checking release environment..."

# Check if we're on main branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo "❌ Error: Not on main branch. Current branch: $CURRENT_BRANCH"
    echo "Please switch to main branch before releasing."
    exit 1
fi

# Check if working directory is clean
if [ -n "$(git status --porcelain)" ]; then
    echo "❌ Error: Working directory is not clean."
    echo "Please commit or stash your changes before releasing."
    git status --short
    exit 1
fi

# Check if we're up to date with remote
git fetch origin
LOCAL=$(git rev-parse HEAD)
REMOTE=$(git rev-parse origin/main)
if [ "$LOCAL" != "$REMOTE" ]; then
    echo "❌ Error: Local branch is not up to date with remote."
    echo "Please pull the latest changes: git pull origin main"
    exit 1
fi

# Check if Node.js version is compatible
NODE_VERSION=$(node -v | cut -d'v' -f2)
REQUIRED_VERSION="16.0.0"
if ! node -e "
const semver = require('semver');
if (!semver.gte('$NODE_VERSION', '$REQUIRED_VERSION')) {
    process.exit(1);
}
" 2>/dev/null; then
    echo "❌ Error: Node.js version $NODE_VERSION is not compatible."
    echo "Required: Node.js >= $REQUIRED_VERSION"
    exit 1
fi

# Check if NPM_TOKEN is set
if [ -z "${NPM_TOKEN:-}" ]; then
    echo "❌ Error: NPM_TOKEN environment variable is not set."
    echo "Please set NPM_TOKEN for authentication with npm registry."
    exit 1
fi

# Run tests
echo "🧪 Running tests..."
if ! npm test; then
    echo "❌ Error: Tests failed."
    exit 1
fi

# Run linting
echo "🔍 Running linter..."
if ! npm run lint; then
    echo "❌ Error: Linting failed."
    exit 1
fi

# Check if build succeeds
echo "🔨 Running build..."
if ! npm run build; then
    echo "❌ Error: Build failed."
    exit 1
fi

# Check package.json version format
PACKAGE_VERSION=$(node -p "require('./package.json').version")
if ! echo "$PACKAGE_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$'; then
    echo "❌ Error: Invalid version format in package.json: $PACKAGE_VERSION"
    echo "Expected format: x.y.z or x.y.z-suffix"
    exit 1
fi

echo "✅ Release environment check passed!"
echo "📦 Package version: $PACKAGE_VERSION"
echo "🎯 Ready for release!" 